{
    "@context": "https://schema.org",
    "@id": "https://rkumar-bengaluru.github.io/algoes/20279",
    "@type": "WebSite",
    "additionalType": [
        "CreativeWork",
        "Person"
    ],
    "url": "https://rkumar-bengaluru.github.io/algoes/20278",
    "headline": "Algoes - CyclicRotation! ",
    "image": "https://rkumar-bengaluru.github.io/algoes/img/icon.svg",
    "specialty": "algorithms, data structures, design patterns, regular expresssion, interview questions",
    "productID": 20279,
    "name": "Algoes - CyclicRotation! | rkumar-bengaluru.github.io",
    "description": "Algoes - CyclicRotation!",
    "title": "Algoes - CyclicRotation! | rkumar-bengaluru.github.io",
    "keywords": [
        "Algoes - CyclicRotation!"
    ],
    "sku": 20279,
    "mpn": 20279,
    "brand": {
        "@type": "Brand",
        "name": "Rupak Kumar..."
    },
    "category": " > home > algorithm > array > CyclicRotation",
    "complextyMetrics": {
        "Worst-case performance": "-",
        "Best-case performance": "-",
        "Average performance": "-",
        "Worst-case space complexity": "-"
    },
    "code": "// An array A consisting of N integers is given. \n// Rotation of the array means that each element is \n// shifted right by one index, and the last element of \n// the array is moved to the first place. For example, \n// the rotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7]\n// (elements are shifted right by one index and 6 is moved to \n// the first place).\n\n// The goal is to rotate array A K times;\n// that is, each element of A will be shifted to the right K \n// times.\nvar A = [3, 8, 9, 7, 6];\nvar K = 3;\n\nrotate(A, K);\nconsole.log(assertEquals(A, [9, 7, 6, 3, 8]));\n\nfunction rotate(A, K) {\n\tfor (var j = 0; j < K; j++) {\n\t\tvar current = A[0];\n\t\tvar last = A[A.length - 1];\n\t\tfor (var i = 1; i <= A.length - 1; i++) {\n\t\t\tvar t = A[i];\n\t\t\tA[i] = current;\n\t\t\tcurrent = t;\n\t\t}\n\t\tA[0] = last;\n\t}\n\n}\n\nfunction assertEquals(Input, Expected) {\n\tif (Input.length != Expected.length) {\n\t\treturn false;\n\t}\n\tfor (var i = 0; i <= Input.length - 1; i++) {\n\t\tif (Input[i] != Expected[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"
}