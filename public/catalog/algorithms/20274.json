{
    "@context": "https://schema.org",
    "@id": "https://rkumar-bengaluru.github.io/algoes/20274",
    "@type": "WebSite",
    "additionalType": [
        "CreativeWork",
        "Person"
    ],
    "url": "https://rkumar-bengaluru.github.io/algoes/20274",
    "headline": "Algoes - Check if a string is an Anagram! - Merge Sort ",
    "image": "https://rkumar-bengaluru.github.io/algoes/img/icon.svg",
    "specialty": "algorithms, data structures, design patterns, regular expresssion, interview questions",
    "productID": 20274,
    "name": "Algoes - Check if a string is an Anagram! - Merge Sort | rkumar-bengaluru.github.io",
    "description": "Algoes - Check if a string is an Anagram! - Merge Sort",
    "title": "Algoes - Check if a string is an Anagram! - Merge Sort | rkumar-bengaluru.github.io",
    "keywords": [
        "Algoes - Check if a string is an Anagram! - Merge Sort"
    ],
    "sku": 20274,
    "mpn": 20274,
    "brand": {
        "@type": "Brand",
        "name": "Rupak Kumar..."
    },
    "category": " > home > algorithm > sorting > Anagram",
    "complextyMetrics": {
        "Worst-case performance": "O(n log n)",
        "Best-case performance": "O(n log n)",
        "Average performance": "O(n log n)",
        "Worst-case space complexity": "O(n)"
    },
    "code": "var iinput = [5, 4, 3, 2, 1];\nvar tinput = ['r', 'u', 'p', 'a', 'k'];\n\nfunction merge(input, l, m, r) {\n\tvar i = l;\n\tvar j = m + 1;\n\twhile (i <= m && j <= r) {\n\t\tif (input[i] > input[j]) {\n\t\t\tswap(input, i, j);\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tfor (var k = j; k <= r; k++) {\n\t\t\t\tif (input[k - 1] > input[k]) {\n\t\t\t\t\tswap(input, k - 1, k);\n\t\t\t\t}\n\t\t\t}\n\t\t\tj = m + 1;\n\t\t} else {\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\n}\n\nfunction swap(input, i, j) {\n\tvar t = input[i];\n\tinput[i] = input[j];\n\tinput[j] = t;\n}\n\nfunction sort(input, l, r) {\n\tif (l < r) {\n\t\tvar m = l + Math.floor((r - l) / 2);\n\t\tsort(input, l, m);\n\t\tsort(input, m + 1, r);\n\t\tmerge(input, l, m, r);\n\t}\n}\n\nfunction getCharArray(s) {\n\tvar r = [];\n\tfor (var i = 0; i < s.length; i++) {\n\t\tr.push(s[i]);\n\t}\n\treturn r;\n}\n\nfunction anagram(a, b) {\n\tif (a.length != b.length) {\n\t\treturn false;\n\t}\n\tvar aSorted = getCharArray(a);\n\tvar bSorted = getCharArray(b);\n\tsort(aSorted, 0, a.length);\n\tsort(bSorted, 0, b.length);\n\tconsole.log(aSorted);\n\tconsole.log(bSorted);\n\n\n\tfor (var i = 0; i < aSorted.length; i++) {\n\t\tif (aSorted[i] != bSorted[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nsort(iinput, 0, iinput.length - 1);\nsort(tinput, 0, tinput.length - 1);\nconsole.log(iinput);\nconsole.log(tinput);\nconsole.log(anagram('rupak', 'kapur'));\n"
}