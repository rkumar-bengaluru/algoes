{
    "@context": "https://schema.org",
    "@id": "https://rkumar-bengaluru.github.io/algoes/#/algorithm/20269",
    "@type": "WebSite",
    "additionalType": [
        "CreativeWork",
        "Person"
    ],
    "url": "https://rkumar-bengaluru.github.io/algoes/#/algorithm/20269",
    "headline": "N Queen Problem",
    "image": "https://rkumar-bengaluru.github.io/algoes/img/icon.svg",
    "specialty": "algorithms, data structures, design patterns, regular expresssion, interview questions",
    "productID": 20269,
    "name": "Algoes - N Queen Problem | rkumar-bengaluru.github.io",
    "description": "The N Queen is the problem of placing N chess queens on an NÃ—N chessboard so that no two queens attack each other.The idea is to place queens one by one in different columns, starting from the leftmost column. When we place a queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to clashes then we backtrack and return false.",
    "title": "N Queen Problem",
    "keywords": [
        "N Queen Problem"
    ],
    "sku": 20269,
    "mpn": 20269,
    "brand": {
        "@type": "Brand",
        "name": "Rupak Kumar..."
    },
    "category": " > home > algorithm > string > N Queen Problem",
    "complextyMetrics": {
        "Worst-case performance": "O(n)",
        "Best-case performance": "O(1)",
        "Average performance": "O(n/2)",
        "Worst-case space complexity": "O(1)"
    },
    "code": "class NQueen {\n\tconstructor(size) {\n\t\t this.board = new Array(size).fill('.').map(\n\t\t\t () => new Array(size).fill('.') );\n\t\t this.size = size;\n\t\t this.solutionCount = 0;\n\t }\n \t\n \tsolveNQ(col) {\n \t\tif (col >= this.size)\n\t\t\t return true;\n \t\tfor (var i = 0; i < this.size; i++) {\n \t\t\tif (this.isValid( i, col)) {\n \t\t\t\tthis.placeQueen(i,col);\n \t\t\t\tif (this.solveNQ( col + 1) === true)\n \t\t\t\t\treturn true;\n \t\t\t\tthis.removeQueen(i, col);\n\t\t\t }\n\t\t }\n\t\t return false;\n\t }\n \n \tsolve() {\n \t\tif (this.solveNQ(0) == false) {\n\t\t\t console.log(\"Solution does not exist\");\n\t\t\t return false;\n\t\t }\n \n\t\t this.printBoard();\n\t\t return true;\n\t }\n \t\n \tisValid (row, col) {\n \t\t/* Check this row on left side */\n\t\tfor (var i = 0; i < col; i++) {\n\t\t\tif (this.board[row][i] === 'Q')\n\t\t\t\treturn false;\n\t\t} \n\t\t/* Check upper diagonal on left side */\n\t\tfor (var i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n\t\t\tif (this.board[i][j] === 'Q')\n\t\t\t\treturn false;\n\t\t} \n\t\t/* Check lower diagonal on left side */\n\t\tfor (var i = row, j = col; j >= 0 && i < this.size; i++, j--) {\n\t\t\tif (this.board[i][j] === 'Q')\n\t\t\t\treturn false;\n\t\t}\n \t\treturn true;\n\t}\n \n \tplaceQueen (row, col) {\n\t\tthis.board[row][col] = 'Q'\n\t}\n\n \tremoveQueen (row, col) {\n\t\tthis.board[row][col] = '.'\n\t}\n \n \tprintBoard () {\n\t\tfor(let row of this.board) {\n\t\t\tconsole.log(JSON.stringify(row));\n\t\t}\n \t}\n}\n\nvar nqueen = new NQueen(4);\nnqueen.solve();\n"
}