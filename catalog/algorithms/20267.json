{
    "@context": "https://schema.org",
    "@id": "https://rkumar-bengaluru.github.io/algoes/#/algorithm/20264",
    "@type": "WebSite",
    "additionalType": [
        "CreativeWork",
        "Person"
    ],
    "url": "https://rkumar-bengaluru.github.io/algoes/#/algorithm/20265",
    "headline": "longest prefix string",
    "image": "https://rkumar-bengaluru.github.io/algoes/img/icon.svg",
    "specialty": "algorithms, data structures, design patterns, regular expresssion, interview questions",
    "productID": 20267,
    "name": "longest prefix string | rkumar-bengaluru.github.io",
    "description": "In computer science, a linear search or sequential search is a method for finding an element within a list. It sequentially checks each element of the list until a match is found or the whole list has been searched.",
    "title": "longest prefix string",
    "keywords": [
        "longest prefix string"
    ],
    "sku": 20267,
    "mpn": 20267,
    "brand": {
        "@type": "Brand",
        "name": "Rupak Kumar..."
    },
    "category": " > home > algorithm > string > longest prefix string",
    "complextyMetrics": {
        "Worst-case performance": "O(n)",
        "Best-case performance": "O(1)",
        "Average performance": "O(n/2)",
        "Worst-case space complexity": "O(1)"
    },
    "code": "function merge (list1, list2) {\n \tconst results = []\n \tlet i = 0\n \tlet j = 0\n \twhile (i < list1.length && j < list2.length) {\n \tif (list1[i] < list2[j]) {\n \t\tresults.push(list1[i++])\n \t} else {\n \t\tresults.push(list2[j++])\n \t}\n \t}\n \treturn results.concat(list1.slice(i), list2.slice(j))\n}\n\nfunction mergeSort (list) {\n \tif (list.length < 2) return list\n \tconst listHalf = Math.floor(list.length / 2)\n \tconst subList1 = list.slice(0, listHalf)\n \tconst subList2 = list.slice(listHalf, list.length)\n \treturn merge(mergeSort(subList1), mergeSort(subList2))\n}\n\nfunction longestCommonPrefix(arr) {\n \tvar sorted = mergeSort(arr);\n \tconsole.log(JSON.stringify(sorted));\n \t// find minimum length string from the sorted array.\n \tvar end = Math.min(sorted[0].length,sorted[sorted.length-1].length);\n \t/* find the common prefix between the first and last string\n \t */\n \tlet i = 0;\n \twhile (i < end && sorted[0][i] == sorted[sorted.length-1][i] )\n \t\ti++;\n \tlet pre = sorted[0].substring(0, i);\n \treturn pre;\n}\n\nlet input=[\"rupak is\", \"rupak and\", \"rupak at\", \"rupak with\"];\nconsole.log(JSON.stringify(longestCommonPrefix(input)));\n"
}