{
    "@context": "https://schema.org",
    "@id": "https://rkumar-bengaluru.github.io/algoes/#/algorithm/20264",
    "@type": "WebSite",
    "additionalType": [
        "CreativeWork",
        "Person"
    ],
    "url": "https://rkumar-bengaluru.github.io/algoes/#/algorithm/20264",
    "headline": "32 bit hashing",
    "image": "https://rkumar-bengaluru.github.io/algoes/img/icon.svg",
    "specialty": "algorithms, data structures, design patterns, regular expresssion, interview questions",
    "productID": 20264,
    "name": "32 bit hashing | rkumar-bengaluru.github.io",
    "description": "32 bit hashing in Hashtable.A Hash Function is an algorithm that converts a long string (or message) of any length into a fixed length string known as Message Digest, checksum or digital fingerprint.",
    "title": "32 bit hashing",
    "keywords": [
        "32 bit hashing"
    ],
    "sku": 20264,
    "mpn": 20264,
    "brand": {
        "@type": "Brand",
        "name": "Rupak Kumar..."
    },
    "category": " > home > algorithm > hash > 32 bit hashing",
    "complextyMetrics": {
        "Worst-case performance": "O(n)",
        "Best-case performance": "O(n)",
        "Average performance": "O(n)",
        "Worst-case space complexity": "O(n)"
    },
    "code": "(function (exports) {\n\t 'use strict';\n\t exports.Hashtable = function () {\n\t\t this.buckets = [];\n\t };\n \n\t exports.Hashtable.prototype.hashCode = function (input) {\n\t\t var hashCode = 0;\n\t\t var asciiValue;\n\t\t // return if there are no characters to hash.\n\t\t if (input.length === 0 || input.length === undefined) {\n\t\t\t return input;\n\t\t }\n\t\t for (let currentChar of input) {\n\t\t\t asciiValue = currentChar.charCodeAt(0);\n\t\t\t // 32 bit hash (2^5)\n\t\t\t hashCode = ((hashCode << 5) - hashCode) + asciiValue;\n\t\t\t hashCode = hashCode & hashCode;\n\t\t }\n\t\t return hashCode;\n\t };\n})(typeof window === 'undefined' ? module.exports : window);\n\nvar h = new Hashtable();\nconsole.log(h.hashCode('rupak'));\n"
}