{
    "@context": "https://schema.org",
    "@id": "https://rkumar-bengaluru.github.io/algoes/20270",
    "@type": "WebSite",
    "additionalType": [
        "CreativeWork",
        "Person"
    ],
    "url": "https://rkumar-bengaluru.github.io/algoes/20270",
    "headline": "Climbing Stairs - recursion",
    "image": "https://rkumar-bengaluru.github.io/algoes/img/icon.svg",
    "specialty": "algorithms, data structures, design patterns, regular expresssion, interview questions",
    "productID": 20270,
    "name": "Algoes - Climbing Stairs - recursion | rkumar-bengaluru.github.io",
    "description": "There are n stairs, and a person is allowed to jump next stair, skip one stair or skip two stairs. So there are n stairs. So if a person is standing at i-th stair, the person can move to i+1, i+2, i+3-th stair. A recursive function can be formed where at current index i the function is recursively called for i+1, i+2 and i+3 th stair. ",
    "title": "Algoes - Climbing Stairs - recursion | rkumar-bengaluru.github.io",
    "keywords": [
        "Climbing Stairs - recursion"
    ],
    "sku": 20270,
    "mpn": 20270,
    "brand": {
        "@type": "Brand",
        "name": "Rupak Kumar..."
    },
    "category": " > home > algorithm > string > Climbing Stairs - recursion",
    "complextyMetrics": {
        "Worst-case performance": "O(3n)",
        "Best-case performance": "O(3n)",
        "Average performance": "O(3n)",
        "Worst-case space complexity": "O(3n)"
    },
    "code": "/**\n * There are n stairs, and a person is allowed to jump next \n * stair, skip one stair or skip two stairs. So there are n \n * stairs. So if a person is standing at i-th stair, the \n * person can move to i+1, i+2, i+3-th stair. A recursive \n * function can be formed where at current index i the \n * function is recursively called for i+1, i+2 and i+3 th \n * stair. \n **/\n/**\n * Time Complexity: O(3n). \n * Space Complexity:O(1). \n */\nfunction findRecursive(n,m) {\n\tif(n === 1 || n === 0) {\n\t\treturn 1;\n\t} else if(n === 2) {\n\t\treturn 2;\n\t} else {\n\t\tvar res = 0;\n\t\tfor (var i = 1; i <= m && i <= n; i++) {\n\t\t\tres += findRecursive(n - i,m);\n\t\t}\n\t\treturn res;\n\t}\n}\n/**\n * Time Complexity: O(n)\n * Space Complexity: O(n). \n **/\nfunction findDynamic(n,m) {\n\tvar waysAtNoOfStairs = new Array(n + 1);\n\twaysAtNoOfStairs[0] = 1;\n\twaysAtNoOfStairs[1] = 1;\n\twaysAtNoOfStairs[2] = 2;\n\tfor(let i = 3; i <=n; i++) {\n\t\twaysAtNoOfStairs[i] = waysAtNoOfStairs[i-1] + \n\t\t\twaysAtNoOfStairs[i-2] + waysAtNoOfStairs[i-3]\n\t}\n\treturn waysAtNoOfStairs[n];\n}\n\n// driver code\nvar noOfStairs = 5;\nvar maxSteps = 3;\nconsole.log('ways to climb ' + noOfStairs + \n ' stairs with max Steps ' + maxSteps + ' - ' + findRecursive(5,3));\nconsole.log('ways to climb ' + noOfStairs + \n ' stairswith max Steps ' + maxSteps + ' - ' + findDynamic(5,3));\n"
}