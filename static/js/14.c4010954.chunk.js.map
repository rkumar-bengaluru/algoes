{"version":3,"sources":["test/index.js"],"names":["ReactTesting","useState","code","setCode","showComponent","name","className","menus","subMenus","map","feature","index","childs","links","value","options","lineNumbers","mode"],"mappings":"0JA4CeA,UAxCM,WACjB,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,SAASC,EAAcC,GACnB,OAAQA,GACJ,IAAK,aACDF,EAAQ,8kBACR,MACJ,IAAK,YACDA,EAAQ,y+CAKpB,OACI,sBAAKG,UAAU,kBAAf,UACI,qDACA,8KACA,+BACI,+BAAI,+DAAJ,sEACA,+BAAI,4DAAJ,0FAEJ,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACKC,EAAMC,SAASC,KAAI,SAACC,EAASC,GAC1B,OAAO,cAAC,IAAD,CAEHN,KAAMK,EAAQL,KACdO,OAAQF,EAAQG,MAChBT,cAAeA,GAHVO,QAMjB,qBAAKL,UAAU,WAAf,SACI,cAAC,eAAD,CACIQ,MAAOZ,EACPa,QAAS,CAACC,aAAY,EAAKC,KAAK,0B","file":"static/js/14.c4010954.chunk.js","sourcesContent":["import menus from './testing.json';\r\nimport ParentComponent from \"../nodejs/collapse/parentcomponent\";\r\nimport {UnControlled as CodeMirror} from 'react-codemirror2';\r\nimport { useState } from 'react';\r\nconst ReactTesting = () => {\r\n    const [code,setCode] = useState('');\r\n    function showComponent(name) {\r\n        switch (name) {\r\n            case 'text match':\r\n                setCode(\"// app.js\\nimport React, {useState} from 'react';\\nconst App = (props) => {\\n\\treturn ( <div >\\n\\t\\t<h1 > {\\tprops.message} < /h1>\\n\\t\\t/div>\\n\\t)\\n}\\nexport default App;\\n// app.test.js\\nimport React from 'react';\\nimport {render,\\tscreen} from '@testing-library/react';\\nimport UserEvent from '@testing-library/user-event';\\nimport '@testing-library/jest-dom';\\nimport App from './app';\\n\\ndescribe('Testing App', () => {\\n\\ttest('render h1 element', () => {\\n\\t\\trender( < App message = \\\"Hello World\\\" / > );\\n\\t\\texpect(screen.getByText(/Hello/)).toBeInTheDocument();\\n\\t});\\n});\\n\");\r\n                break;\r\n            case 'UserEvent':\r\n                setCode(\"// app.js\\nimport React, {\\tuseState} from 'react';\\n\\nconst App = (props) => {\\n\\tconst [counter, setCounter] = useState(0);\\n\\n\\tconst increment = () => {\\n\\t\\tsetCounter((prev) => ++prev);\\n\\t}\\n\\tconst decrement = () => {\\n\\t\\tsetCounter((prev) => --prev);\\n\\t}\\n\\n\\treturn ( <div >\\n\\t\\t<h1 > {\\tprops.message} < /h1> \\n\\t\\t<h2 data - testid = \\\"counter\\\" > {counter} < /h2> \\n\\t\\t<button onClick = {increment} > Increment < /button> <\\n\\t\\tbutton onClick = {decrement} > Decrement < /button> <\\n\\t\\t/div>\\n\\t)\\n}\\nexport default App;\\n\\n// app.test.js\\nimport React from 'react';\\nimport {render,screen} from '@testing-library/react';\\nimport UserEvent from '@testing-library/user-event';\\nimport '@testing-library/jest-dom';\\nimport App from './app';\\n\\ndescribe('Testing App', () => {\\n\\ttest('increment', () => {\\n\\t\\trender( < App message = \\\"Something\\\" / > );\\n\\t\\tconst counter = screen.getByTestId('counter');\\n\\t\\tconst incrementButton = screen.getByText('Increment');\\n\\t\\tUserEvent.click(incrementButton);\\n\\t\\tUserEvent.click(incrementButton);\\n\\t\\texpect(counter.textContent).toEqual('2');\\n\\t\\tscreen.debug();\\n\\t});\\n\\n\\ttest('decrement', () => {\\n\\t\\trender( < App message = \\\"\\\" / > );\\n\\t\\tconst counter = screen.getByTestId('counter');\\n\\t\\tconst decrementButton = screen.getByText('Decrement');\\n\\t\\tUserEvent.click(decrementButton);\\n\\t\\texpect(counter.textContent).toEqual('-1');\\n\\t\\tUserEvent.click(decrementButton);\\n\\t\\texpect(counter.textContent).toEqual('-2');\\n\\t});\\n});\\n\");\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <h6>React Basic Testing</h6>\r\n            <p>You can test React components similar to testing other JavaScript code.You can test React components similar to testing other JavaScript code</p>\r\n            <ul>\r\n                <li><strong>Rendering component trees</strong> in a simplified test environment and asserting on their output.</li>\r\n                <li><strong>Running a complete app</strong> in a realistic browser environment (also known as “end-to-end” tests).</li>\r\n            </ul>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-3\">\r\n                    {menus.subMenus.map((feature, index) => {\r\n                        return <ParentComponent\r\n                            key={index}\r\n                            name={feature.name}\r\n                            childs={feature.links}\r\n                            showComponent={showComponent} />\r\n                    })}\r\n                </div>\r\n                <div className=\"col-sm-9\">\r\n                    <CodeMirror\r\n                        value={code}\r\n                        options={{lineNumbers:true,mode:\"javascript\"}}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ReactTesting;"],"sourceRoot":""}