(this.webpackJsonpalgoes=this.webpackJsonpalgoes||[]).push([[25],{111:function(e,t,i){"use strict";i.r(t);var s=i(0);t.default=function(){return Object(s.jsxs)("div",{className:"container-fluid",children:[Object(s.jsx)("h5",{children:"Spring Cloud Gateway"}),Object(s.jsx)("p",{children:"This project provides an API Gateway built on top of the Spring Ecosystem, including: Spring 5, Spring Boot 2 and Project Reactor. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency."}),Object(s.jsxs)("ul",{children:[Object(s.jsxs)("li",{children:[Object(s.jsx)("strong",{children:"Route--\x3e"})," The basic building block of the gateway. It is defined by an ID, a destination URI, a collection of predicates, and a collection of filters. A route is matched if the aggregate predicate is true."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("strong",{children:"Predicate--\x3e"})," This is a Java 8 Function Predicate. The input type is a Spring Framework ServerWebExchange. This lets you match on anything from the HTTP request, such as headers or parameters."]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("strong",{children:"Filter --\x3e"})," These are instances of GatewayFilter that have been constructed with a specific factory. Here, you can modify requests and responses before or after sending the downstream request"]})]}),Object(s.jsx)("div",{className:"row",children:Object(s.jsx)("img",{width:"900px",src:"/algoes/img/spring.io/gateway.jpg"})}),Object(s.jsxs)("div",{className:"row",children:[Object(s.jsx)("h5",{children:"@EnableEurekaClient"}),Object(s.jsx)("p",{children:"When a client registers with Eureka, it provides meta-data about itself\u2009\u2014\u2009such as host, port, health indicator URL, home page, and other details. Eureka receives heartbeat messages from each instance belonging to a service. If the heartbeat fails over a configurable timetable, the instance is normally removed from the registry."}),Object(s.jsxs)("p",{children:["In this example ",Object(s.jsx)("strong",{children:"BMT-API-GATEWAY is registered to EurekaServer"})]})]}),Object(s.jsxs)("div",{className:"row",children:[Object(s.jsx)("h5",{children:"@EnableHystrix"}),Object(s.jsx)("p",{children:"Hystrix is an implementation of the Circuit Breaker pattern by Netflix. The @EnableHystrix annotation require a specific implementation, if Hystrix is not on the classpath it will fail."})]}),Object(s.jsxs)("div",{className:"row",children:[Object(s.jsx)("h5",{children:"@EnableCircuitBreaker"}),Object(s.jsx)("p",{children:"The @EnableCircuitBreaker annotation will scan the classpath for any compatible Circuit Breaker implementation.@EnableCircuitBreaker allows for the evolution of the Spring Cloud.."})]}),Object(s.jsxs)("div",{className:"row",children:[Object(s.jsx)("h5",{children:"RequestRateLimiter "}),Object(s.jsx)("p",{children:"RequestRateLimiter is one of the many gateway filters. The implementation determines whether a request is allowed to proceed or has exceeded its limit. "}),Object(s.jsxs)("ul",{children:[Object(s.jsxs)("li",{children:[Object(s.jsx)("h6",{children:"redis-rate-limiter.replenishRate"}),Object(s.jsx)("p",{children:"decides how many requests per second a user is allowed to send without any dropped requests.This is the rate that the token bucket is filled."})]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("h6",{children:"redis-rate-limiter.burstCapacity"}),Object(s.jsx)("p",{children:"is the maximum number of requests a user is allowed to do in a single second. This is the number of tokens the token bucket can hold. Setting this value to zero will block all requests."})]}),Object(s.jsxs)("li",{children:[Object(s.jsx)("h6",{children:"redis-rate-limiter.requestedTokens"}),Object(s.jsx)("p",{children:"the requestedTokens property sets how many tokens a request costs."})]})]})]})]})}}}]);
//# sourceMappingURL=25.e090cd0d.chunk.js.map