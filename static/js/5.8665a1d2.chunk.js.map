{"version":3,"sources":["react/usecontext.js"],"names":["ReactUseContext","useState","code","setCode","handleClick","type","className","href","onClick","value","options","lineNumbers","matchBrakets","mode"],"mappings":"wIA4DeA,UA1DS,WACpB,MAAwBC,mBAAS,mHAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,SAASC,EAAYC,GACjB,OAAQA,GACJ,KAAK,EACDF,EAAQ,mHACR,MACJ,KAAK,EACDA,EAAQ,KACR,MACJ,KAAK,EACDA,EAAQ,KACR,MACJ,KAAK,EACDA,EAAQ,MAMpB,OACI,gCACI,iDACA,0JACA,sRACA,+DACA,sBAAKG,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,+BACI,6BACI,mBAAGC,KAAK,qBAAqBC,QAAS,kBAAMJ,EAAY,IAAxD,8BAEJ,6BACI,mBAAGG,KAAK,qBAAqBC,QAAS,kBAAMJ,EAAY,IAAxD,+BAGJ,+BACI,2CACA,+BACI,6BACI,mBAAGG,KAAK,qBAAqBC,QAAS,kBAAMJ,EAAY,IAAxD,+BAEJ,6BACI,mBAAGG,KAAK,qBAAqBC,QAAS,kBAAMJ,EAAY,IAAxD,qCAOpB,qBAAKE,UAAU,WAAf,SACI,cAAC,eAAD,CAAYG,MAAOP,EACfQ,QAAS,CAAEC,aAAa,EAAMC,cAAc,EAAMC,KAAM","file":"static/js/5.8665a1d2.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { UnControlled as CodeMirror } from \"react-codemirror2\";\r\nconst ReactUseContext = () => {\r\n    const [code, setCode] = useState(\"import React from 'react';\\nconst WebSocketContext = React.createContext();\\nexport default WebSocketContext;\\n\");\r\n    function handleClick(type) {\r\n        switch (type) {\r\n            case 1:\r\n                setCode(\"import React from 'react';\\nconst WebSocketContext = React.createContext();\\nexport default WebSocketContext;\\n\");\r\n                break;\r\n            case 2:\r\n                setCode('2');\r\n                break;\r\n            case 3:\r\n                setCode('3');\r\n                break;\r\n            case 4:\r\n                setCode('4');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <h6>UseContext Hook</h6>\r\n            <p>React’s useContext hook makes it easy to pass data throughout your app without manually passing props down the tree.</p>\r\n            <p>It makes up part of React’s Context API (the other parts being the Provider and Consumer components, which we’ll see examples of below). Context can make a nice simple alternative to Redux when your data is simple or your app is small.</p>\r\n            <p>React Context Api has 2 facets</p>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-3\">\r\n                    <ul>\r\n                        <li>\r\n                            <a href=\"javascript:void(0)\" onClick={() => handleClick(1)}>Create Context</a>\r\n                        </li>\r\n                        <li>\r\n                            <a href=\"javascript:void(0)\" onClick={() => handleClick(2)}>Create Provider</a>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <div>Consumer</div>\r\n                            <ul>\r\n                                <li>\r\n                                    <a href=\"javascript:void(0)\" onClick={() => handleClick(3)}>Create Consumer</a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"javascript:void(0)\" onClick={() => handleClick(4)}>useContext</a>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n\r\n                    </ul>\r\n                </div>\r\n                <div className=\"col-sm-9\">\r\n                    <CodeMirror value={code}\r\n                        options={{ lineNumbers: true, matchBrakets: true, mode: \"javascript\" }} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ReactUseContext;"],"sourceRoot":""}