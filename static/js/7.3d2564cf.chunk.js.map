{"version":3,"sources":["react/component/algoescode.js","nodejs/axios/axios.js"],"names":["AlgoesCode","attachShadow","mode","template","document","createElement","innerHTML","shadowRoot","appendChild","content","cloneNode","__element","__flask","a","src","this","hasAttribute","getAttribute","querySelector","CodeFlask","language","styleParent","lineNumbers","updateCode","name","oldValue","newValue","HTMLElement","customElements","define","AxiosFramework","dcode","dhome","useState","split","map","value","index","array","temp","charCodeAt","toString","toUpperCase","length","join","code","setCode","home","setHome","AxiosApi","type","className","AxiosInstance","showComponent","axiosmenus","subMenus","feature","childs","links","style"],"mappings":"2KAGMA,E,kDACF,aAAe,IAAD,uBACV,gBACKC,aAAa,CAAEC,KAAM,SAC1B,IAAMC,EAAWC,SAASC,cAAc,YAH9B,OAIVF,EAASG,UAAT,6CACA,EAAKC,WAAWC,YAAYL,EAASM,QAAQC,WAAU,IACvD,EAAKC,UAAY,KACjB,EAAKC,QAAU,KAPL,E,4FAcd,4BAAAC,EAAA,sDACUC,EAAMC,KAAKC,aAAa,OAASD,KAAKE,aAAa,OAAS,OAClEF,KAAKJ,UAAYI,KAAKR,WAAWW,cAAc,WAC/CH,KAAKH,QAAU,IAAIO,IAAUJ,KAAKJ,UAAW,CAAES,SAAU,KAAMC,YAAaN,KAAKR,WAAYe,aAAa,IAC1GP,KAAKH,QAAQW,WAAWT,GAJ5B,gD,4FAOA,SAAyBU,EAAMC,EAAUC,GACrC,GAAa,QAATF,EAAgB,CAChB,IAAMV,EAAMC,KAAKC,aAAa,OAASD,KAAKE,aAAa,OAAS,OAC9DF,KAAKH,SACLG,KAAKH,QAAQW,WAAWT,O,+BAfpC,WACI,MAAO,CAAC,W,eAZSa,cA+BzBC,eAAeC,OAAO,cAAe7B,I,8ZCsFtB8B,UApHQ,WACnB,IAAMC,EAAQ,u4BACRC,EAAQ,qCAAE,iDACZ,sSACA,0CACA,+BACI,uEACA,iEACA,0DACA,gEACA,qEACA,iDACA,oEACA,uFAER,EAAwBC,mBAAmBF,EA+D5BG,MAAM,IAAIC,KAAI,SAAUC,EAAOC,EAAOC,GAC7C,IAAIC,EAAOH,EAAMI,WAAW,GAAGC,SAAS,IAAIC,cAC5C,OAAIH,EAAKI,OAAS,EACP,MAAQJ,EAEZH,KACRQ,KAAK,KArEZ,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBb,mBAASD,GAAjC,mBAAOe,EAAP,KAAaC,EAAb,KAEIC,EAAW,SAAUC,GAarB,MAAa,QAATA,EAFO,6YAIS,SAATA,EAZH,sBAAKC,UAAU,YAAf,UAA2B,2CACvB,+FACA,uDAUL,GAKPC,EAAgB,SAAUF,GAa1B,MAAa,QAATA,EAFO,2JAIS,SAATA,EAZH,sBAAKC,UAAU,YAAf,UAA2B,oDACvB,8FACA,gEAUL,GAKX,SAASE,EAAc7B,GACnB,OAAQA,GACJ,IAAK,QACDwB,EAAQhB,GACRc,EAAQf,GACR,MACJ,IAAK,MACDiB,EAAQC,EAAS,SACjBH,EAAQG,EAAS,QACjB,MACJ,IAAK,WACDD,EAAQI,EAAc,SACtBN,EAAQM,EAAc,SAkBlC,OACI,qBAAKD,UAAU,kBAAf,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACKG,EAAWC,SAASpB,KAAI,SAACqB,EAASnB,GAC/B,OAAO,cAAC,IAAD,CAA6Bb,KAAMgC,EAAQhC,KAAMiC,OAAQD,EAAQE,MAAOL,cAAeA,GAAjEhB,QAGrC,sBAAKc,UAAU,WAAf,UACI,qBAAKA,UAAU,MAAf,SACKJ,IAEL,8CACA,qBAAKY,MAAO,CAAE,OAAU,SAAWR,UAAU,aAA7C,SACI,6BACIrC,IAAK+B","file":"static/js/7.3d2564cf.chunk.js","sourcesContent":["\r\nimport CodeFlask from 'codeflask'\r\n\r\nclass AlgoesCode extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({ mode: 'open' });\r\n        const template = document.createElement('template')\r\n        template.innerHTML = `<div className=\"border\" id=\"editor\"></div>`;\r\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\r\n        this.__element = null;\r\n        this.__flask = null;\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return ['src']\r\n    }\r\n\r\n    async connectedCallback() {\r\n        const src = this.hasAttribute('src') ? this.getAttribute('src') : 'null';\r\n        this.__element = this.shadowRoot.querySelector('#editor');\r\n        this.__flask = new CodeFlask(this.__element, { language: 'js', styleParent: this.shadowRoot, lineNumbers: true });\r\n        this.__flask.updateCode(src);\r\n    }\r\n\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        if (name === 'src') {\r\n            const src = this.hasAttribute('src') ? this.getAttribute('src') : 'null';\r\n            if (this.__flask) {\r\n                this.__flask.updateCode(src);\r\n            }\r\n        }\r\n    }\r\n}\r\ncustomElements.define('algoes-code', AlgoesCode);","import ParentComponent from \"../collapse/parentcomponent\";\r\nimport axiosmenus from './axios.json';\r\nimport '../../react/component/algoescode'\r\nimport { useState } from \"react\";\r\nconst AxiosFramework = () => {\r\n    const dcode = \"const axios = require('axios');\\n\\n// Make a request for a user with a given ID\\naxios.get('/user?ID=12345')\\n\\t.then(function (response) {\\n\\t\\t// handle success\\n\\t\\tconsole.log(response);\\n\\t})\\n\\t.catch(function (error) {\\n\\t\\t// handle error\\n\\t\\tconsole.log(error);\\n\\t})\\n\\t.then(function () {\\n\\t\\t// always executed\\n\\t});\\n\\n// Optionally the request above could also be done as\\naxios.get('/user', {\\n\\t\\tparams: {\\n\\t\\t\\tID: 12345\\n\\t\\t}\\n\\t})\\n\\t.then(function (response) {\\n\\t\\tconsole.log(response);\\n\\t})\\n\\t.catch(function (error) {\\n\\t\\tconsole.log(error);\\n\\t})\\n\\t.then(function () {\\n\\t\\t// always executed\\n\\t});\\n\\n// Want to use async/await? Add the `async` keyword to your outer function/method.\\nasync function getUser() {\\n\\ttry {\\n\\t\\tconst response = await axios.get('/user?ID=12345');\\n\\t\\tconsole.log(response);\\n\\t} catch (error) {\\n\\t\\tconsole.error(error);\\n\\t}\\n}\\n\";\r\n    const dhome = <><h6>Axios Framework</h6>\r\n        <p>Axios is a promise-based HTTP Client for node.js and the browser. It is isomorphic (= it can run in the browser and nodejs with the same codebase). On the server-side it uses the native node.js http module, while on the client (browser) it uses XMLHttpRequests.</p>\r\n        <h6>Features</h6>\r\n        <ul>\r\n            <li>Make XMLHttpRequests from the browser</li>\r\n            <li>Make http requests from node.js</li>\r\n            <li>Supports the Promise API</li>\r\n            <li>Intercept request and response</li>\r\n            <li>Transform request and response data</li>\r\n            <li>Cancel requests</li>\r\n            <li>Automatic transforms for JSON data</li>\r\n            <li>Client side support for protecting against XSRF</li>\r\n        </ul></>;\r\n    const [code, setCode] = useState(toUnicode(dcode));\r\n    const [home, setHome] = useState(dhome);\r\n\r\n    var AxiosApi = function (type) {\r\n        function fetchHome() {\r\n            return (\r\n                <div className=\"container\"><h6>Axios API</h6>\r\n                    <p> Requests can be made by passing the relevant config to axios.</p>\r\n                    <h6>axios(config)</h6>\r\n                </div>\r\n\r\n            )\r\n        }\r\n        function fetchCode() {\r\n            return \"// Send a POST request\\naxios({\\n\\tmethod: 'post',\\n\\turl: '/user/12345',\\n\\tdata: {\\n\\t\\tfirstName: 'Fred',\\n\\t\\tlastName: 'Flintstone'\\n\\t}\\n});\\n// GET request for remote image in node.js\\naxios({\\n\\t\\tmethod: 'get',\\n\\t\\turl: 'http://bit.ly/2mTM3nY',\\n\\t\\tresponseType: 'stream'\\n\\t})\\n\\t.then(function (response) {\\n\\t\\tresponse.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\\n\\t});\\n\"\r\n        }\r\n        if (type === 'api') {\r\n            return fetchCode();\r\n        } else if (type === 'home') {\r\n            return fetchHome();\r\n        }\r\n    }\r\n\r\n    var AxiosInstance = function (type) {\r\n        function fetchHome() {\r\n            return (\r\n                <div className=\"container\"><h6>The Axios Instance</h6>\r\n                    <p> You can create a new instance of axios with a custom config.</p>\r\n                    <h6>axios.create([config])</h6>\r\n                </div>\r\n\r\n            )\r\n        }\r\n        function fetchCode() {\r\n            return \"const instance = axios.create({\\n\\tbaseURL: 'https://some-domain.com/api/',\\n\\ttimeout: 1000,\\n\\theaders: {\\n\\t\\t'X-Custom-Header': 'foobar'\\n\\t}\\n});\\n\"\r\n        }\r\n        if (type === 'api') {\r\n            return fetchCode();\r\n        } else if (type === 'home') {\r\n            return fetchHome();\r\n        }\r\n    }\r\n\r\n    function showComponent(name) {\r\n        switch (name) {\r\n            case 'Axios':\r\n                setHome(dhome);\r\n                setCode(dcode);\r\n                break;\r\n            case 'api':\r\n                setHome(AxiosApi('home'));\r\n                setCode(AxiosApi('api'));\r\n                break;\r\n            case 'instance':\r\n                setHome(AxiosInstance('home'));\r\n                setCode(AxiosInstance('api'));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function toUnicode(str) {\r\n        return str.split('').map(function (value, index, array) {\r\n            var temp = value.charCodeAt(0).toString(16).toUpperCase();\r\n            if (temp.length > 2) {\r\n                return '\\\\u' + temp;\r\n            }\r\n            return value;\r\n        }).join('');\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-3\">\r\n                    {axiosmenus.subMenus.map((feature, index) => {\r\n                        return <ParentComponent key={index} name={feature.name} childs={feature.links} showComponent={showComponent} />\r\n                    })}\r\n                </div>\r\n                <div className=\"col-sm-9\">\r\n                    <div className=\"row\">\r\n                        {home}\r\n                    </div>\r\n                    <h6>Example Code</h6>\r\n                    <div style={{ \"height\": \"750px\" }} className=\"row border\">\r\n                        <algoes-code\r\n                            src={code} />\r\n                    </div>\r\n\r\n                    {/* <div style={{ \"height\": \"300px\" }} className=\"row border\">\r\n                        <algoes-code\r\n                            src={toUnicode(`const axios = require('axios');\\n// Make a request for a user with a given ID\\naxios.get('/user?ID=12345')\\n\\t.then(function (response) {\\n\\t\\t// handle success\\n\\t\\tconsole.log(response);\\n\\t})\\n\\t.catch(function (error) {\\n\\t\\t// handle error\\n\\t\\tconsole.log(error);\\n\\t})\\n\\t.then(function () {\\n\\t\\t// always executed\\n\\t});\\n`)} />\r\n                    </div> */}\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AxiosFramework;"],"sourceRoot":""}