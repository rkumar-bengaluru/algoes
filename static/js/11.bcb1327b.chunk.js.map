{"version":3,"sources":["react/useMemo.js","react/component/algoescode.js"],"names":["ReactUseMemo","inputEl","useRef","useState","value","setValue","counter","setCounter","memoizedResult","useMemo","n","prev","factorial","className","style","src","ref","onChange","e","Number","target","inputChanged","placeholder","onClick","console","log","current","AlgoesCode","attachShadow","mode","template","document","createElement","innerHTML","shadowRoot","appendChild","content","cloneNode","__element","__flask","a","this","hasAttribute","getAttribute","querySelector","CodeFlask","language","styleParent","lineNumbers","updateCode","name","oldValue","newValue","HTMLElement","customElements","define"],"mappings":"2IA8DeA,UA5DM,WACjB,IACMC,EAAUC,iBAAO,MACvB,EAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,KAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAAiBC,mBAAQ,kBAMjBC,EAN4BN,EAOtCG,GAAW,SAACI,GAAD,QAAYA,KAChBC,EAAUF,GAFrB,IAAcA,IANoC,CAACN,IAcnD,SAASQ,EAAUF,GACf,OAAQA,GAAK,EAAI,EAAIA,EAAIE,EAAUF,EAAI,GAE3C,OACI,sBAAKG,UAAU,YAAf,UACI,yCACA,6GACA,wKAIA,0FACA,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,MAAf,SACI,wCAEJ,qBAAKA,UAAU,MAAf,SACI,qBAAKC,MAAO,CAAE,OAAU,SAAWD,UAAU,SAA7C,SACI,6BAAaE,IAtCxB,m6EA0CD,sBAAKF,UAAU,WAAf,UACI,qBAAKA,UAAU,MAAf,SACI,uDAEJ,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,MAAf,SAAqB,uBAAOG,IAAKf,EAASgB,SAAU,SAACC,GAAD,OAhCxE,SAAsBA,GAClBX,EAAW,GACXF,EAASc,OAAOD,EAAEE,OAAOhB,QA8BgDiB,CAAaH,IAAII,YAAalB,MACvF,qBAAKS,UAAU,MAAf,SAAqB,wBAAQU,QAAS,kBAxCtDC,QAAQC,IAAI,SAAWxB,EAAQyB,QAAQtB,YACvCC,EAASc,OAAOlB,EAAQyB,QAAQtB,SAuCK,yBACrB,sBAAKS,UAAU,MAAf,oBAA6BL,QAEjC,qBAAKK,UAAU,MAAf,SACI,sBAAKA,UAAU,MAAf,uBAAgCT,EAAhC,gCAAoEE,kB,0GCpDtFqB,E,kDACF,aAAe,IAAD,uBACV,gBACKC,aAAa,CAAEC,KAAM,SAC1B,IAAMC,EAAWC,SAASC,cAAc,YAH9B,OAIVF,EAASG,UAAT,6CACA,EAAKC,WAAWC,YAAYL,EAASM,QAAQC,WAAU,IACvD,EAAKC,UAAY,KACjB,EAAKC,QAAU,KAPL,E,4FAcd,4BAAAC,EAAA,sDACUzB,EAAM0B,KAAKC,aAAa,OAASD,KAAKE,aAAa,OAAS,OAClEF,KAAKH,UAAYG,KAAKP,WAAWU,cAAc,WAC/CH,KAAKF,QAAU,IAAIM,IAAUJ,KAAKH,UAAW,CAAEQ,SAAU,KAAMC,YAAaN,KAAKP,WAAYc,aAAa,IAC1GP,KAAKF,QAAQU,WAAWlC,GAJ5B,gD,4FAOA,SAAyBmC,EAAMC,EAAUC,GACrC,GAAa,QAATF,EAAgB,CAChB,IAAMnC,EAAM0B,KAAKC,aAAa,OAASD,KAAKE,aAAa,OAAS,OAC9DF,KAAKF,SACLE,KAAKF,QAAQU,WAAWlC,O,+BAfpC,WACI,MAAO,CAAC,W,eAZSsC,cA+BzBC,eAAeC,OAAO,cAAe5B","file":"static/js/11.bcb1327b.chunk.js","sourcesContent":["import { useRef, useMemo, useState } from 'react';\r\nimport '../react/component/algoescode'\r\nconst ReactUseMemo = () => {\r\n    const code = \"import {useRef,useMemo,useState} from 'react';\\nimport '../react/component/algoescode'\\nconst ReactUseMemo = () => {\\n\\tconst code = \\\"\\\";\\n\\tconst inputEl = useRef(null);\\n\\tconst [value, setValue] = useState(5);\\n\\tconst [counter, setCounter] = useState('0');\\n\\n\\tconst memoizedResult = useMemo(() => fact(value), [value]);\\n\\n\\tfunction handleClick() {\\n\\t\\tconsole.log('input ' + inputEl.current.value);\\n\\t\\tsetValue(Number(inputEl.current.value));\\n\\t}\\n\\n\\tfunction fact(n) {\\n\\t\\tsetCounter((prev) => ++prev);\\n\\t\\treturn factorial(n);\\n\\t}\\n\\n\\tfunction inputChanged(e) {\\n\\t\\tsetCounter(0);\\n\\t\\tsetValue(Number(e.target.value));\\n\\t}\\n\\n\\tfunction factorial(n) {\\n\\t\\treturn (n <= 0 ? 1 : n * factorial(n - 1));\\n\\t}\\n\\treturn ( \\n\\t\\t<div className = \\\"container\\\" >\\n\\t\\t\\t<h6 > useMemo < /h6> \\n\\t\\t\\t<code >\\n\\t\\t\\t\\tconst memoizedValue = useMemo(() = & gt; computeExpensiveValue(a, b), [a, b]); \\n \\t\\t\\t< /code> \\n \\t\\t\\t<p >\\n\\t\\t\\tuseMemo() is a built - in React hook that accepts 2 arguments— a\\n\\t\\t\\tfunction compute that computes a result and the depedencies array:\\n\\t\\t\\t</p> \\n\\t\\t\\t<code >\\n\\t\\t\\tconst memoizedResult = useMemo(compute, dependencies); < /code> \\n\\t\\t\\t<div className = \\\"row\\\" >\\n\\t\\t\\t\\t<div className = \\\"col-sm-6\\\" >\\n \\t<div className = \\\"row\\\" >\\n\\t\\t\\t\\t\\t\\t<h6 > Code < /h6> \\n\\t\\t\\t\\t\\t</div> \\n\\t\\t\\t\\t\\t<div className = \\\"row\\\" >\\n\\t\\t\\t\\t\\t\\t<div style = {{\\t\\\"heigth\\\": \\\"500px\\\"}} className = \\\"border\\\" >\\n\\t\\t\\t\\t\\t\\t<algoes - code src = {\\tcode} > < /algoes-code> \\n\\t\\t\\t\\t\\t\\t</div> \\n\\t\\t\\t\\t\\t</div> \\n\\t\\t\\t\\t</div> \\n\\t\\t\\t\\t<div className = \\\"col-sm-6\\\" >\\n\\t\\t\\t\\t\\t<div className = \\\"row\\\" >\\n\\t\\t\\t\\t\\t\\t<h6 > Find Factorial Demo < /h6> \\n\\t\\t\\t\\t\\t</div> \\n\\t\\t\\t\\t\\t<div className = \\\"row\\\" >\\n\\t\\t\\t\\t\\t<div className = \\\"col\\\" > < input ref = {\\n\\t\\t\\t\\t\\t\\tinputEl\\n\\t\\t\\t\\t\\t\\t} onChange = {(e) => inputChanged(e)}\\n\\t\\t\\t\\t\\t\\tplaceholder = {\\tvalue}/>\\n\\t\\t\\t\\t\\t</div >\\n\\t\\t\\t\\t\\t<div className = \\\"col\\\" > < button onClick = {\\n\\t\\t\\t\\t\\t\\t() => handleClick()\\n\\t\\t\\t\\t\\t\\t} > Calculate < /button>\\n\\t\\t\\t\\t\\t</div >\\n\\t\\t\\t\\t\\t<div className = \\\"col\\\" > Result {\\n\\t\\t\\t\\t\\t\\tmemoizedResult\\n\\t\\t\\t\\t\\t} < /div> \\n\\t\\t\\t\\t</div> \\n\\t\\t\\t\\t<div className = \\\"row\\\" >\\n\\t\\t\\t\\t\\t<div className = \\\"col\\\" >\\n\\t\\t\\t\\t\\t\\tfor input {\\tvalue} no of times\\n\\t\\t\\t\\t\\t\\tfunction called {counter} < /div> \\n\\t\\t\\t\\t</div> \\n\\t\\t\\t</div> \\n\\t\\t</div> \\n\\t\\t</div>\\n\\t)\\n}\\nexport default ReactUseMemo;\\n\";\r\n    const inputEl = useRef(null);\r\n    const [value, setValue] = useState(5);\r\n    const [counter, setCounter] = useState('0');\r\n\r\n    const memoizedResult = useMemo(() => fact(value), [value]);\r\n\r\n    function handleClick() {\r\n        console.log('input ' + inputEl.current.value);\r\n        setValue(Number(inputEl.current.value));\r\n    }\r\n    function fact(n) {\r\n        setCounter((prev) => ++prev);\r\n        return factorial(n);\r\n    }\r\n    function inputChanged(e) {\r\n        setCounter(0);\r\n        setValue(Number(e.target.value));\r\n    }\r\n    function factorial(n) {\r\n        return (n <= 0 ? 1 : n * factorial(n - 1));\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <h6>useMemo</h6>\r\n            <code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);</code>\r\n            <p>\r\n                useMemo() is a built-in React hook that accepts 2 arguments — a function\r\n                compute that computes a result and the depedencies array:\r\n            </p>\r\n            <code>const memoizedResult = useMemo(compute, dependencies);</code>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6\">\r\n                    <div className=\"row\">\r\n                        <h6>Code</h6>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div style={{ \"height\": \"500px\" }} className=\"border\">\r\n                            <algoes-code src={code}></algoes-code>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-sm-6\">\r\n                    <div className=\"row\">\r\n                        <h6>Find Factorial Demo</h6>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\"><input ref={inputEl} onChange={(e)=>inputChanged(e)} placeholder={value} /></div>\r\n                        <div className=\"col\"><button onClick={() => handleClick()}>Calculate</button></div>\r\n                        <div className=\"col\">Result {memoizedResult}</div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">for input {value} no of times function called {counter}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ReactUseMemo;","\r\nimport CodeFlask from 'codeflask'\r\n\r\nclass AlgoesCode extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.attachShadow({ mode: 'open' });\r\n        const template = document.createElement('template')\r\n        template.innerHTML = `<div className=\"border\" id=\"editor\"></div>`;\r\n        this.shadowRoot.appendChild(template.content.cloneNode(true));\r\n        this.__element = null;\r\n        this.__flask = null;\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return ['src']\r\n    }\r\n\r\n    async connectedCallback() {\r\n        const src = this.hasAttribute('src') ? this.getAttribute('src') : 'null';\r\n        this.__element = this.shadowRoot.querySelector('#editor');\r\n        this.__flask = new CodeFlask(this.__element, { language: 'js', styleParent: this.shadowRoot, lineNumbers: true });\r\n        this.__flask.updateCode(src);\r\n    }\r\n\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        if (name === 'src') {\r\n            const src = this.hasAttribute('src') ? this.getAttribute('src') : 'null';\r\n            if (this.__flask) {\r\n                this.__flask.updateCode(src);\r\n            }\r\n        }\r\n    }\r\n}\r\ncustomElements.define('algoes-code', AlgoesCode);"],"sourceRoot":""}