{"version":3,"sources":["spring/router.js"],"names":["SpringRouter","def","initial","current","prev","useReducer","state","action","type","dispatch","className","href","onClick","value","options","lineNumbers","mode"],"mappings":"wIAkDeA,UA/CM,WAEjB,IAAMC,EAAM,y2BACNC,EAAU,CAAEC,QAASF,EAAKG,KAAM,IACtC,EAA0BC,sBAC1B,SAAiBC,EAAOC,GACpB,OAAQA,EAAOC,MACX,KAAK,EACD,MAAO,CAAEJ,KAAME,EAAMH,QAASA,QAASF,GAC3C,KAAK,EACD,MAAO,CAAEG,KAAME,EAAMH,QAASA,QAAS,4iCAC3C,KAAK,EACD,MAAO,CAAEC,KAAME,EAAMH,QAASA,QAAS,wEARLD,GAA9C,mBAAOI,EAAP,KAAcG,EAAd,KAaA,OACI,qCACI,gDAGA,qJAEA,sBAAKC,UAAU,MAAf,UACI,qBAAKA,UAAU,MAAf,SACI,mBAAGC,KAAK,qBAAqBC,QAAS,kBAAMH,EAAS,CAAED,KAAM,KAA7D,uBAEJ,qBAAKE,UAAU,MAAf,SACI,mBAAGC,KAAK,qBAAqBC,QAAS,kBAAMH,EAAS,CAAED,KAAM,KAA7D,sBAEJ,qBAAKE,UAAU,MAAf,SACI,mBAAGC,KAAK,qBAAqBC,QAAS,kBAAMH,EAAS,CAAED,KAAM,KAA7D,wBAGR,qBAAKE,UAAU,MAAf,SACI,cAAC,eAAD,CACIG,MAAOP,EAAMH,QACbW,QAAS,CACLC,aAAa,EACbC,KAAM","file":"static/js/1.b6e666ad.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\r\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\r\n\r\nconst SpringRouter = () => {\r\n\r\n    const def = \"@Component\\npublic class ProductHandler {\\n\\n\\tpublic Mono < ServerResponse > hello(ServerRequest request) {\\n\\t\\treturn ServerResponse.ok().contentType(MediaType.APPLICATION_JSON)\\n\\t\\t\\t.body(BodyInserters.fromValue(\\\"Hello, Spring!\\\"));\\n\\t}\\n\\n\\tpublic Mono < ServerResponse > findProduct(ServerRequest request) {\\n\\t\\tMono < LocalShopProduct3 > oneProduct = Mono.just(new LocalShopProduct3(\\\"2002\\\", \\\"Yonex 18i\\\"));\\n\\t\\treturn ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(oneProduct, LocalShopProduct3.class);\\n\\t}\\n\\n\\tpublic Mono < ServerResponse > findAll(ServerRequest request) {\\n\\t\\tFlux < LocalShopProduct3 > all = Flux.just(new LocalShopProduct3(\\\"2001\\\", \\\"Apacs Ziggler\\\"),\\n\\t\\t\\tnew LocalShopProduct3(\\\"2002\\\", \\\"Yonex 18i\\\"));\\n\\t\\treturn ServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(all, LocalShopProduct3.class);\\n\\t}\\n}\\n\";\r\n    const initial = { current: def, prev: '' };\r\n    const [state, dispatch] = useReducer(reducer, initial);\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case 0:\r\n                return { prev: state.current, current: def };\r\n            case 1:\r\n                return { prev: state.current, current: \"@Configuration(proxyBeanMethods = false)\\npublic class ProductRouter {\\n\\tLogger log = LoggerFactory.getLogger(getClass());\\n\\n\\t@Bean\\n\\tpublic RouterFunction < ServerResponse > route(ProductHandler greetingHandler) {\\n\\t\\treturn RouterFunctions\\n\\t\\t\\t.route(GET(\\\"/hello\\\").and(accept(MediaType.APPLICATION_JSON)), greetingHandler::hello);\\n\\t}\\n\\n\\t@Bean\\n\\tRouterFunction < ServerResponse > home(ProductHandler handler) {\\n\\t\\tRouterFunction < ServerResponse > r = RouterFunctions.route(GET(\\\"/products/findOne\\\"),\\n\\t\\t\\thandler::findProduct);\\n\\t\\treturn r;\\n\\t}\\n\\n\\t@Bean\\n\\tRouterFunction < ServerResponse > all(ProductHandler handler) {\\n\\t\\tRouterFunction < ServerResponse > r = RouterFunctions.route(GET(\\\"/products/all\\\"),\\n\\t\\t\\thandler::findAll);\\n\\t\\treturn r;\\n\\t}\\n\\n\\t@Bean\\n\\tRouterFunction < ServerResponse > nested(ProductHandler handler) {\\n\\t\\tRouterFunction < ServerResponse > r = RouterFunctions.route(GET(\\\"/nested/one\\\"),\\n\\t\\t\\thandler::findProduct).and(RouterFunctions.route(GET(\\\"/nested/all\\\"), handler::findAll));\\n\\t\\treturn r;\\n\\t}\\n\\n}\\n\" };\r\n            case 2:\r\n                return { prev: state.current, current: \"public record LocalShopProduct3(String productID, String name) {}\" };\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <h6>Spring WebFlux</h6>\r\n\r\n\r\n            <p>The functional web framework introduces a new programming model where we use functions to route and handle requests.</p>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <a href=\"javascript:void(0)\" onClick={() => dispatch({ type: 0 })}>Handler</a>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <a href=\"javascript:void(0)\" onClick={() => dispatch({ type: 1 })}>Router</a>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <a href=\"javascript:void(0)\" onClick={() => dispatch({ type: 2 })}>Model</a>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <CodeMirror\r\n                    value={state.current}\r\n                    options={{\r\n                        lineNumbers: true,\r\n                        mode: \"javascript\"\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default SpringRouter;"],"sourceRoot":""}