(this.webpackJsonpalgoes=this.webpackJsonpalgoes||[]).push([[26],{112:function(e,t,c){"use strict";c.r(t);var r=c(2),s=c(1),i=c(0);t.default=function(){var e=function(){return Object(i.jsxs)("div",{className:"row",children:[Object(i.jsx)("h5",{children:"Spring Security"}),Object(i.jsx)("p",{children:"Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications."}),Object(i.jsx)("p",{children:"Topics covered for Spring security are below:"}),Object(i.jsxs)("ul",{children:[Object(i.jsxs)("li",{children:[Object(i.jsx)("a",{href:"",onClick:function(e){return h(e,1)},children:"Basic Authentication"}),Object(i.jsx)("p",{children:"Each Request must contain username and password"})]}),Object(i.jsxs)("li",{children:[Object(i.jsx)("a",{href:"",onClick:function(e){return h(e,2)},children:"Form Basic Authentication"}),Object(i.jsx)("p",{children:"User authenticate once, the server attaches JESSIONID, subsequent request is authenticated based on the JESSIONID."})]}),Object(i.jsxs)("li",{children:[Object(i.jsx)("a",{href:"",onClick:function(e){return h(e,3)},children:"Cross Site Request Forgery(CSRF)"}),Object(i.jsx)("p",{children:"Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they\u2019re currently authenticated"}),Object(i.jsx)("p",{children:"Enable for any resource access via web browsers."})]}),Object(i.jsxs)("li",{children:[Object(i.jsx)("a",{href:"",onClick:function(e){return h(e,4)},children:"Authentication Provider"}),Object(i.jsx)("p",{children:"Integrate Application User Repository with application authentication provider."})]}),Object(i.jsxs)("li",{children:[Object(i.jsx)("a",{href:"",onClick:function(e){return h(e,5)},children:"JWT Authentication"}),Object(i.jsx)("p",{children:"Authenticate once with JWT Filter and attaches JWT token to response, subsequent request is authenticated and authroized with JWT token."}),Object(i.jsx)("p",{children:"Good for REST API securtity."})]}),Object(i.jsxs)("li",{children:[Object(i.jsx)("a",{href:"",onClick:function(e){return h(e,6)},children:"JWT Token Verifier"}),Object(i.jsx)("p",{children:"Servlet filter to verify if the passed JWT token is trust worthy. before user is allowed to access the desired server resource."})]})]})]})},t=Object(s.useState)(e),c=Object(r.a)(t,2),n=c[0],a=c[1],o=function(){return Object(i.jsxs)(i.Fragment,{children:[Object(i.jsx)("div",{className:"row",children:Object(i.jsx)("h5",{children:"Basic Authentication"})}),Object(i.jsxs)("div",{className:"row",children:[Object(i.jsxs)("p",{children:["Trigger to enable basic authentication is to configure ",Object(i.jsx)("code",{children:"HttpSecurity.httpBasic()"})]}),Object(i.jsx)("p",{children:"There are 2 microservices"}),Object(i.jsxs)("ul",{children:[Object(i.jsx)("li",{children:"Partner Service (/partner/create,/partner/{id})"}),Object(i.jsx)("li",{children:"Search Service (/search/all,/search/movie/{id},/search/theatre/{id})"})]})]}),Object(i.jsx)("div",{className:"row",children:Object(i.jsx)("img",{width:"900px",src:"/algoes/img/spring.io/basic-auth.jpg"})}),Object(i.jsx)("div",{className:"row",children:Object(i.jsx)("p",{children:"There are 2 Roles (ADMIN and PUBLIC). ADMIN can access partner resource and search resource, however PUBLIC role can only access search resource."})}),Object(i.jsx)("code",{children:'http.authorizeRequests() .antMatchers("/search/**") .hasAnyRole(UserRoles.ADMIN.name(),UserRoles.PUBLIC.name()) .antMatchers("/partner/**") .hasRole(UserRoles.ADMIN.name());'}),Object(i.jsx)("div",{className:"row",children:Object(i.jsx)("a",{href:"",onClick:function(e){return h(e,0)},children:"Back"})})]})};function h(t,c){switch(t.preventDefault(),console.log(c),c){case 0:a(e);break;case 1:a(o);break;default:a(Object(i.jsx)("code",{children:"TODO"}))}}return Object(i.jsx)("div",{className:"container-fluid",children:n})}}}]);
//# sourceMappingURL=26.4f18ec15.chunk.js.map