{"version":3,"sources":["react/errorboundary.js"],"names":["ReactErrorBoundary","def","initial","current","prev","useReducer","state","action","type","dispatch","className","href","onClick","value","options","lineNumbers","mode"],"mappings":"yIAwCeA,UAtCY,WACvB,IAAMC,EAAM,iqCACNC,EAAU,CAAEC,QAASF,EAAKG,KAAM,IACtC,EAA0BC,sBAC1B,SAAiBC,EAAOC,GACpB,OAAQA,EAAOC,MACX,KAAK,EACD,MAAO,CAAEJ,KAAME,EAAMH,QAASA,QAASF,GAC3C,KAAK,EACD,MAAO,CAAEG,KAAME,EAAMH,QAASA,QAAS,oVANLD,GAA9C,mBAAOI,EAAP,KAAcG,EAAd,KAWA,OACI,qCACI,sDACA,2VACA,sBAAKC,UAAU,MAAf,UACI,qBAAKA,UAAU,MAAf,SACI,mBAAGC,KAAK,qBAAqBC,QAAS,kBAAMH,EAAS,CAAED,KAAM,KAA7D,2CAEJ,qBAAKE,UAAU,MAAf,SACI,mBAAGC,KAAK,qBAAqBC,QAAS,kBAAMH,EAAS,CAAED,KAAM,KAA7D,yCAGR,qBAAKE,UAAU,MAAf,SACI,cAAC,eAAD,CACIG,MAAOP,EAAMH,QACbW,QAAS,CACLC,aAAa,EACbC,KAAM","file":"static/js/10.b835c1a2.chunk.js","sourcesContent":["import React, {useReducer} from 'react';\r\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\r\nconst ReactErrorBoundary = () => {\r\n    const def = \"/**\\n * Error boundaries are React components that catch JavaScript errors anywhere \\n * in their child component tree, log those errors, and display a fallback UI \\n * instead of the component tree that crashed. Error boundaries catch errors \\n * during rendering, in lifecycle methods, and in constructors of the whole \\n * tree below them.\\n */\\nimport React from 'react';\\n\\nclass LSErrorBoundary extends React.Component {\\n\\tconstructor(props) {\\n\\t\\tsuper(props);\\n\\t\\tthis.state = {\\n\\t\\t\\terrored: false\\n\\t\\t};\\n\\t}\\n\\t/**\\n\\t * Custom Error Boundary class must implments getDerivedStateFromError()\\n\\t */\\n\\tstatic getDerivedStateFromError(error) {\\n\\t\\treturn {\\n\\t\\t\\terrored: true\\n\\t\\t};\\n\\t}\\n\\t/**\\n\\t * Custom Error Boundary can override the lifecycle method componentDidCatch()\\n\\t * method to log the error and errorInfo \\n\\t */\\n\\tcomponentDidCatch(error, errorInfo) {\\n\\t\\tconsole.log('error happened in child components' + error);\\n\\t}\\n\\n\\trender() {\\n\\t\\tif (this.state.errored) {\\n\\t\\t\\treturn ( <\\n\\t\\t\\t\\tdiv > Something Went Wrong loading this component. < /div>\\n\\t\\t\\t)\\n\\t\\t}\\n\\t\\treturn this.props.children;\\n\\t}\\n}\\nexport default LSErrorBoundary;\\n\";\r\n    const initial = { current: def, prev: '' };\r\n    const [state, dispatch] = useReducer(reducer, initial);\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case 0:\r\n                return { prev: state.current, current: def };\r\n            case 1:\r\n                return { prev: state.current, current: \"< LSErrorBoundary >\\n\\t// use React.Suspense as fallback.\\n\\t<Suspense fallback = {\\n\\t\\t() => {\\n\\t\\t\\treturn <h1 > Error happened in children. < /h1>}}> \\n\\t\\t// one or more child components, any error in loading\\n\\t\\t// child component will be caught by LSErrorBoundary\\n\\t\\t<SpringRouter / >\\n\\t</Suspense> \\n</LSErrorBoundary>\\n\" };\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <h6>React Error Boundary</h6>\r\n            <p>Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.</p>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <a href=\"javascript:void(0)\" onClick={() => dispatch({ type: 0 })}>Define Custom ErrorBoundary</a>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <a href=\"javascript:void(0)\" onClick={() => dispatch({ type: 1 })}>Usage Of ErrorBoundary</a>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <CodeMirror\r\n                    value={state.current}\r\n                    options={{\r\n                        lineNumbers: true,\r\n                        mode: \"javascript\"\r\n                    }}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ReactErrorBoundary;"],"sourceRoot":""}